"""Crutchy~ Cythonization of app sources to avoid decompiling pyc files of yours private sources."""

from pathlib import Path

from setuptools import Extension, setup

# TODO: Versioning..
##
SRC = 'p4a_dev'

BASENAME = SRC.split('/')[-1]

# TODO: Do it better.. (Use setuptools recursive search)
# TODO: MORE TESTS ON REAL DEVICES!!!
# TODO: Skip compiling if debug..
# TODO: Do something with dir sub-packages.. (better than just __init__.py -> __init__.so)
extensions = [
	Extension(f'{BASENAME}.app.launch', [f'{SRC}/app/launch.py']),
	Extension(f'{BASENAME}.view.base_screen', [f'{SRC}/view/base_screen.py']),
	Extension(f'{BASENAME}.view.screens', [f'{SRC}/view/screens.py']),

	Extension(
		f'{BASENAME}.view.main_screen.main_screen',
		[f'{SRC}/view/main_screen/main_screen.py'],
	),

	Extension(
		f'{BASENAME}.view.settings_screen.main_screen',
		[f'{SRC}/view/settings_screen/main_screen.py'],
	),

	Extension(
		f'{BASENAME}.view.main_screen.components.platforms.mobile.main_screen',
		[f'{SRC}/view/main_screen/components/platforms/mobile/main_screen.py'],
	),

	Extension(
		f'{BASENAME}.view.settings_screen.components.platforms.mobile.main_screen',
		[f'{SRC}/view/settings_screen/components/platforms/mobile/main_screen.py'],
	),

	Extension(f'{BASENAME}.utility.observer', [f'{SRC}/utility/observer.py']),

	Extension(f'{BASENAME}.libs.__init__', [f'{SRC}/libs/__init__.py']),
	Extension(f'{BASENAME}.libs.filechooser', [f'{SRC}/libs/filechooser.py']),
	Extension(f'{BASENAME}.libs.ssl_conf', [f'{SRC}/libs/ssl_conf.py']),

	Extension(f'{BASENAME}.model.base_model', [f'{SRC}/model/base_model.py']),
	Extension(f'{BASENAME}.model.main_screen', [f'{SRC}/model/main_screen.py']),
	Extension(f'{BASENAME}.model.settings_screen', [f'{SRC}/model/settings_screen.py']),

	Extension(f'{BASENAME}.controller.main_screen', [f'{SRC}/controller/main_screen.py']),
	Extension(f'{BASENAME}.controller.settings_screen', [f'{SRC}/controller/settings_screen.py']),
]

# Replace '.py' to '.c' if packaging 'c' files (code generated by Cython)
for ext in extensions:
	for i, s in enumerate(ext.sources):
		sp = Path(s)

		##
		s = f'{sp.parent}/{sp.stem}.c'
		##
		if sp.exists() and not Path(s).exists():
			continue
		ext.sources[i] = s

		print('Cythonized source:', ext.sources[i])

try:
	from Cython.Build import cythonize
	# from Cython.Build import build_ext, cythonize
except ImportError:
	def cythonize(*args, **kwargs):
		return extensions


setup(
	name=BASENAME,
	ext_modules=cythonize(
		extensions,
		# exclude=[f'{SRC}/main.py'],
		compiler_directives={
			'language_level': 3,
		},
	),
	include_package_data=True,
	# package_data={'': ['*.kv']},
	packages=[
		'p4a_dev',
		'p4a_dev.services',  # TODO: Make it private too..
		# 'p4a_dev.view.main_screen.components.platforms.mobile',  # just ignore..
	],
	#extra_compile_args=['-O3'],
	##libraries=['m'],

	# cmdclass={'build_ext': build_ext},

    # setup_requires=['cython>=0.29.37'],
)
